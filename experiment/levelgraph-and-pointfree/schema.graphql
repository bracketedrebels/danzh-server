type Query {
  project(id: ID): [Project!]!
}

type Mutation {
  aspectCreateNumeric(predicateId: ID!, init: InputAspectTypeNumeric): Aspect!
  aspectCreateString(predicateId: ID!, init: InputAspectTypeString): Aspect!
  aspectCreateSet(predicateId: ID!, init: InputAspectTypeSet): Aspect!
  aspectUpdate(aspectId: ID!, patch: AspectUpdateMutationArgs): Aspect!
  aspectRemove(aspectId: ID!): Int

  predicateCreate(projectId: ID!, init: PrediateCreateMutationArgs!): Predicate!
  predicateUpdate(predicateId: ID!, patch: PrediateUpdateMutationArgs!): Predicate!
  predicateRemove(predicateId: ID!): Predicate!

  projectCreate(init: ProjectCreateMutationArgs!): Project!
  projectUpdate(projectId: ID!, patch: ProjectUpdateMutationArgs!): Project!
  projectRemove(projectId: ID!): Project!

  entityCreate(projectId: ID!, init: EntityCreateMutationArgs!): Entity!
  entityUpdate(projectId: ID!, patch: EntityUpdateMutationArgs!): Entity!
  entityRemove(projectId: ID!): Entity!

  edgeCreate(s: ID!, p: ID!, o: ID!, aspects: [String!]): Edge!
  edgeUpdate(s: ID!, p: ID!, o: ID!, aspects: [String!]): Edge!
  edgeRemove(s: ID!, p: ID!, o: ID!): Edge!
}

input InputAspectTypeNumeric {
  min: Float
  max: Float
  step: Float
  required: Boolean
  description: String
}

input InputAspectTypeString {
  regexp: String
  required: Boolean
  description: String
}

input InputAspectTypeSet {
  items: [String!]
  required: Boolean
  description: String
}

type AspectTypeNumeric {
  min: Float
  max: Float
  step: Float
}

type AspectTypeString {
  regexp: String
}

type AspectTypeSet {
  items: [String!]
}

union AspectType = AspectTypeNumeric | AspectTypeString | AspectTypeSet

type Aspect {
  id: ID!
  position: Int!
  required: Boolean!
  type: AspectType!
  description: String
}

input AspectUpdateMutationArgs {
  name: String!
  description: String
}

type Predicate {
  id: ID!
  name: String!
  description: String!
  aspect(id: ID): [Aspect!]!
}

input PrediateCreateMutationArgs {
  name: String!
  description: String
}

input PrediateUpdateMutationArgs {
  name: String
  description: String
}

type Project {
  id: ID!
  name: String!
  description: String
  predicate(id: ID): [Predicate!]!
  entity(id: ID): [Entity!]!
  edge(query: [SearchAtom!]): [Edge!]!
}

input ProjectCreateMutationArgs {
  name: String!
  description: String
}

input ProjectUpdateMutationArgs {
  name: String
  description: String
}

type Entity {
  id: ID!
  name: String!
  description: String
}

input EntityCreateMutationArgs {
  name: String!
  description: String
}

input EntityUpdateMutationArgs {
  name: String
  description: String
}

type Edge {
  subject: Entity!
  predicate: Predicate!
  object: Entity!
}

type EdgePredicate {
  aspect: Aspect!
  value: String
}

input SearchAtom {
  s: String
  p: String
  o: String
}
